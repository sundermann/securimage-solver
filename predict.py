import os
os.environ["KERAS_BACKEND"] = "plaidml.keras.backend"

from PIL import Image, ImageOps
import numpy as np
import keras
from flask import Flask, request

app = Flask(__name__)

model = keras.models.load_model("model.h5")
CLASSES = {0: '1+1', 1: '1+2', 2: '1+3', 3: '1+4', 4: '1+5', 5: '10+1', 6: '10+2', 7: '10+3', 8: '10+4', 9: '10+5', 10: '10-1', 11: '10-2', 12: '10-3', 13: '10-4', 14: '10-5', 15: '10x1', 16: '10x2', 17: '10x3', 18: '10x4', 19: '10x5', 20: '1x1', 21: '1x2', 22: '1x3', 23: '1x4', 24: '1x5', 25: '2+1', 26: '2+2', 27: '2+3', 28: '2+4', 29: '2+5', 30: '2-1', 31: '2x1', 32: '2x2', 33: '2x3', 34: '2x4', 35: '2x5', 36: '3+1', 37: '3+2', 38: '3+3', 39: '3+4', 40: '3+5', 41: '3-1', 42: '3-2', 43: '3x1', 44: '3x2', 45: '3x3', 46: '3x4', 47: '3x5', 48: '4+1', 49: '4+2', 50: '4+3', 51: '4+4', 52: '4+5', 53: '4-1', 54: '4-2', 55: '4-3', 56: '4x1', 57: '4x2', 58: '4x3', 59: '4x4', 60: '4x5', 61: '5+1', 62: '5+2', 63: '5+3', 64: '5+4', 65: '5+5', 66: '5-1', 67: '5-2', 68: '5-3', 69: '5-4', 70: '5x1', 71: '5x2', 72: '5x3', 73: '5x4', 74: '5x5', 75: '6+1', 76: '6+2', 77: '6+3', 78: '6+4', 79: '6+5', 80: '6-1', 81: '6-2', 82: '6-3', 83: '6-4', 84: '6-5', 85: '6x1', 86: '6x2', 87: '6x3', 88: '6x4', 89: '6x5', 90: '7+1', 91: '7+2', 92: '7+3', 93: '7+4', 94: '7+5', 95: '7-1', 96: '7-2', 97: '7-3', 98: '7-4', 99: '7-5', 100: '7x1', 101: '7x2', 102: '7x3', 103: '7x4', 104: '7x5', 105: '8+1', 106: '8+2', 107: '8+3', 108: '8+4', 109: '8+5', 110: '8-1', 111: '8-2', 112: '8-3', 113: '8-4', 114: '8-5', 115: '8x1', 116: '8x2', 117: '8x3', 118: '8x4', 119: '8x5', 120: '9+1', 121: '9+2', 122: '9+3', 123: '9+4', 124: '9+5', 125: '9-1', 126: '9-2', 127: '9-3', 128: '9-4', 129: '9-5', 130: '9x1', 131: '9x2', 132: '9x3', 133: '9x4', 134: '9x5'}

def preprocess_image(filename):
    im = Image.open(filename)
    im = im.convert("L")

    data = np.array(im)
    data[data > 145] = 255
    data[data <= 145] = 0
    im = Image.fromarray(data)

    im = ImageOps.invert(im)
    imageBox = im.getbbox()
    im = im.crop(imageBox)
    im = ImageOps.invert(im)
    im = im.resize((32, 32), resample=0)

    return (np.array(im) / 255.0).reshape(1, 32, 32, 1)

@app.route("/predict", methods=["POST"])
def predict():
    input = request.files["image"].stream
    input = preprocess_image(input)
    predict = model.predict(input)
    return CLASSES[np.argmax(predict)]